/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/update_environment_variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update environment variables
         * @description Update one or many environment variables in a deployment.
         *     This will invalidate all subscriptions, since environment variables
         *     are accessible in queries but are not part of the cache key of a query
         *     result.
         */
        post: operations["update_environment_variables"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/list_environment_variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List environment variables
         * @description Get all environment variables in a deployment.
         *     In the future this might not include "secret" environment
         *     variables.
         */
        get: operations["list_environment_variables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/update_canonical_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update canonical URL
         * @description Set or unset the canonical URL for a deployment's convex.cloud or
         *     convex.site domain. This allows you to customize the  CONVEX_SITE_URL and
         *     CONVEX_CLOUD_URL environment variables in your deployment.
         */
        post: operations["update_canonical_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get_canonical_urls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get canonical URLs
         * @description Get the canonical URLs for a deployment.
         */
        get: operations["get_canonical_urls"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        GetCanonicalUrlsResponse: {
            convexCloudUrl: string;
            convexSiteUrl: string;
        };
        ListEnvVarsResponse: {
            environmentVariables: {
                [key: string]: string;
            };
        };
        /** @enum {string} */
        RequestDestination: "convexCloud" | "convexSite";
        UpdateCanonicalUrlRequest: {
            /** @description Whether to update the canonical URL for convex.cloud or convex.site */
            requestDestination: components["schemas"]["RequestDestination"];
            /** @description The new canonical URL. Omit this to reset the canonical URl to the
             *     default value. */
            url?: string | null;
        };
        UpdateEnvVarRequest: {
            name: string;
            value?: string | null;
        };
        UpdateEnvVarsRequest: {
            changes: components["schemas"]["UpdateEnvVarRequest"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type GetCanonicalUrlsResponse = components['schemas']['GetCanonicalUrlsResponse'];
export type ListEnvVarsResponse = components['schemas']['ListEnvVarsResponse'];
export type RequestDestination = components['schemas']['RequestDestination'];
export type UpdateCanonicalUrlRequest = components['schemas']['UpdateCanonicalUrlRequest'];
export type UpdateEnvVarRequest = components['schemas']['UpdateEnvVarRequest'];
export type UpdateEnvVarsRequest = components['schemas']['UpdateEnvVarsRequest'];
export type $defs = Record<string, never>;
export interface operations {
    update_environment_variables: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEnvVarsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_environment_variables: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListEnvVarsResponse"];
                };
            };
        };
    };
    update_canonical_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCanonicalUrlRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_canonical_urls: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCanonicalUrlsResponse"];
                };
            };
        };
    };
}
